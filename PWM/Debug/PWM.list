
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080029fc  080029fc  000039fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a28  08002a28  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002a28  08002a28  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a28  08002a28  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a28  08002a28  00003a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a2c  08002a2c  00003a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002a30  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000010  08002a40  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002a40  00004110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000858a  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d2  00000000  00000000  0000c5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0000dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074d  00000000  00000000  0000e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001709c  00000000  00000000  0000ee5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a36f  00000000  00000000  00025ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008740f  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b8  00000000  00000000  000b76bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000b9d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080029e4 	.word	0x080029e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080029e4 	.word	0x080029e4

0800014c <motor_run>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void motor_run(int16_t left_speed, int16_t right_speed)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	80fb      	strh	r3, [r7, #6]
 8000158:	4613      	mov	r3, r2
 800015a:	80bb      	strh	r3, [r7, #4]
	if(left_speed > 0)
 800015c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000160:	2b00      	cmp	r3, #0
 8000162:	f340 80cd 	ble.w	8000300 <motor_run+0x1b4>
	{
		// phase 1
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 8000166:	2201      	movs	r2, #1
 8000168:	2110      	movs	r1, #16
 800016a:	4862      	ldr	r0, [pc, #392]	@ (80002f4 <motor_run+0x1a8>)
 800016c:	f001 f9ce 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000170:	4b61      	ldr	r3, [pc, #388]	@ (80002f8 <motor_run+0x1ac>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	2200      	movs	r2, #0
 8000176:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 0);
 8000178:	2200      	movs	r2, #0
 800017a:	2120      	movs	r1, #32
 800017c:	485d      	ldr	r0, [pc, #372]	@ (80002f4 <motor_run+0x1a8>)
 800017e:	f001 f9c5 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000182:	4b5d      	ldr	r3, [pc, #372]	@ (80002f8 <motor_run+0x1ac>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	2200      	movs	r2, #0
 8000188:	639a      	str	r2, [r3, #56]	@ 0x38

		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 800018a:	2201      	movs	r2, #1
 800018c:	2140      	movs	r1, #64	@ 0x40
 800018e:	4859      	ldr	r0, [pc, #356]	@ (80002f4 <motor_run+0x1a8>)
 8000190:	f001 f9bc 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, left_speed);
 8000194:	4b58      	ldr	r3, [pc, #352]	@ (80002f8 <motor_run+0x1ac>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800019c:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 800019e:	4b57      	ldr	r3, [pc, #348]	@ (80002fc <motor_run+0x1b0>)
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	4618      	mov	r0, r3
 80001a4:	f000 ff2a 	bl	8000ffc <HAL_Delay>

		  // phase 2
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2110      	movs	r1, #16
 80001ac:	4851      	ldr	r0, [pc, #324]	@ (80002f4 <motor_run+0x1a8>)
 80001ae:	f001 f9ad 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80001b2:	4b51      	ldr	r3, [pc, #324]	@ (80002f8 <motor_run+0x1ac>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	2200      	movs	r2, #0
 80001b8:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 80001ba:	2201      	movs	r2, #1
 80001bc:	2120      	movs	r1, #32
 80001be:	484d      	ldr	r0, [pc, #308]	@ (80002f4 <motor_run+0x1a8>)
 80001c0:	f001 f9a4 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, left_speed);
 80001c4:	4b4c      	ldr	r3, [pc, #304]	@ (80002f8 <motor_run+0x1ac>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80001cc:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 0);
 80001ce:	2200      	movs	r2, #0
 80001d0:	2140      	movs	r1, #64	@ 0x40
 80001d2:	4848      	ldr	r0, [pc, #288]	@ (80002f4 <motor_run+0x1a8>)
 80001d4:	f001 f99a 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80001d8:	4b47      	ldr	r3, [pc, #284]	@ (80002f8 <motor_run+0x1ac>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2200      	movs	r2, #0
 80001de:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 80001e0:	4b46      	ldr	r3, [pc, #280]	@ (80002fc <motor_run+0x1b0>)
 80001e2:	881b      	ldrh	r3, [r3, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 ff09 	bl	8000ffc <HAL_Delay>

		  // phase 3
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 0);
 80001ea:	2200      	movs	r2, #0
 80001ec:	2110      	movs	r1, #16
 80001ee:	4841      	ldr	r0, [pc, #260]	@ (80002f4 <motor_run+0x1a8>)
 80001f0:	f001 f98c 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80001f4:	4b40      	ldr	r3, [pc, #256]	@ (80002f8 <motor_run+0x1ac>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2200      	movs	r2, #0
 80001fa:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2120      	movs	r1, #32
 8000200:	483c      	ldr	r0, [pc, #240]	@ (80002f4 <motor_run+0x1a8>)
 8000202:	f001 f983 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, left_speed);
 8000206:	4b3c      	ldr	r3, [pc, #240]	@ (80002f8 <motor_run+0x1ac>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800020e:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	@ 0x40
 8000214:	4837      	ldr	r0, [pc, #220]	@ (80002f4 <motor_run+0x1a8>)
 8000216:	f001 f979 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800021a:	4b37      	ldr	r3, [pc, #220]	@ (80002f8 <motor_run+0x1ac>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2200      	movs	r2, #0
 8000220:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 8000222:	4b36      	ldr	r3, [pc, #216]	@ (80002fc <motor_run+0x1b0>)
 8000224:	881b      	ldrh	r3, [r3, #0]
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fee8 	bl	8000ffc <HAL_Delay>

		  // phase 4
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 800022c:	2201      	movs	r2, #1
 800022e:	2110      	movs	r1, #16
 8000230:	4830      	ldr	r0, [pc, #192]	@ (80002f4 <motor_run+0x1a8>)
 8000232:	f001 f96b 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, left_speed);
 8000236:	4b30      	ldr	r3, [pc, #192]	@ (80002f8 <motor_run+0x1ac>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800023e:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2120      	movs	r1, #32
 8000244:	482b      	ldr	r0, [pc, #172]	@ (80002f4 <motor_run+0x1a8>)
 8000246:	f001 f961 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800024a:	4b2b      	ldr	r3, [pc, #172]	@ (80002f8 <motor_run+0x1ac>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	2200      	movs	r2, #0
 8000250:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 8000252:	2201      	movs	r2, #1
 8000254:	2140      	movs	r1, #64	@ 0x40
 8000256:	4827      	ldr	r0, [pc, #156]	@ (80002f4 <motor_run+0x1a8>)
 8000258:	f001 f958 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800025c:	4b26      	ldr	r3, [pc, #152]	@ (80002f8 <motor_run+0x1ac>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2200      	movs	r2, #0
 8000262:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 8000264:	4b25      	ldr	r3, [pc, #148]	@ (80002fc <motor_run+0x1b0>)
 8000266:	881b      	ldrh	r3, [r3, #0]
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fec7 	bl	8000ffc <HAL_Delay>

		  // phase 5
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 800026e:	2201      	movs	r2, #1
 8000270:	2110      	movs	r1, #16
 8000272:	4820      	ldr	r0, [pc, #128]	@ (80002f4 <motor_run+0x1a8>)
 8000274:	f001 f94a 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, left_speed);
 8000278:	4b1f      	ldr	r3, [pc, #124]	@ (80002f8 <motor_run+0x1ac>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000280:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 8000282:	2201      	movs	r2, #1
 8000284:	2120      	movs	r1, #32
 8000286:	481b      	ldr	r0, [pc, #108]	@ (80002f4 <motor_run+0x1a8>)
 8000288:	f001 f940 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800028c:	4b1a      	ldr	r3, [pc, #104]	@ (80002f8 <motor_run+0x1ac>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2200      	movs	r2, #0
 8000292:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 0);
 8000294:	2200      	movs	r2, #0
 8000296:	2140      	movs	r1, #64	@ 0x40
 8000298:	4816      	ldr	r0, [pc, #88]	@ (80002f4 <motor_run+0x1a8>)
 800029a:	f001 f937 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800029e:	4b16      	ldr	r3, [pc, #88]	@ (80002f8 <motor_run+0x1ac>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2200      	movs	r2, #0
 80002a4:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 80002a6:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <motor_run+0x1b0>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 fea6 	bl	8000ffc <HAL_Delay>

		  // phase 6
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 0);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2110      	movs	r1, #16
 80002b4:	480f      	ldr	r0, [pc, #60]	@ (80002f4 <motor_run+0x1a8>)
 80002b6:	f001 f929 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80002ba:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <motor_run+0x1ac>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2200      	movs	r2, #0
 80002c0:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2120      	movs	r1, #32
 80002c6:	480b      	ldr	r0, [pc, #44]	@ (80002f4 <motor_run+0x1a8>)
 80002c8:	f001 f920 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <motor_run+0x1ac>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2200      	movs	r2, #0
 80002d2:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2140      	movs	r1, #64	@ 0x40
 80002d8:	4806      	ldr	r0, [pc, #24]	@ (80002f4 <motor_run+0x1a8>)
 80002da:	f001 f917 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, left_speed);
 80002de:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <motor_run+0x1ac>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80002e6:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 80002e8:	4b04      	ldr	r3, [pc, #16]	@ (80002fc <motor_run+0x1b0>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fe85 	bl	8000ffc <HAL_Delay>
 80002f2:	e10a      	b.n	800050a <motor_run+0x3be>
 80002f4:	40010800 	.word	0x40010800
 80002f8:	2000002c 	.word	0x2000002c
 80002fc:	20000000 	.word	0x20000000
	}
	else if(left_speed < 0)
 8000300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000304:	2b00      	cmp	r3, #0
 8000306:	f280 80e5 	bge.w	80004d4 <motor_run+0x388>
	{
		  // phase 6
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	2110      	movs	r1, #16
 800030e:	486e      	ldr	r0, [pc, #440]	@ (80004c8 <motor_run+0x37c>)
 8000310:	f001 f8fc 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000314:	4b6d      	ldr	r3, [pc, #436]	@ (80004cc <motor_run+0x380>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2200      	movs	r2, #0
 800031a:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 800031c:	2201      	movs	r2, #1
 800031e:	2120      	movs	r1, #32
 8000320:	4869      	ldr	r0, [pc, #420]	@ (80004c8 <motor_run+0x37c>)
 8000322:	f001 f8f3 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000326:	4b69      	ldr	r3, [pc, #420]	@ (80004cc <motor_run+0x380>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2200      	movs	r2, #0
 800032c:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	2140      	movs	r1, #64	@ 0x40
 8000332:	4865      	ldr	r0, [pc, #404]	@ (80004c8 <motor_run+0x37c>)
 8000334:	f001 f8ea 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, abs(left_speed));
 8000338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800033c:	2b00      	cmp	r3, #0
 800033e:	bfb8      	it	lt
 8000340:	425b      	neglt	r3, r3
 8000342:	b29a      	uxth	r2, r3
 8000344:	4b61      	ldr	r3, [pc, #388]	@ (80004cc <motor_run+0x380>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 800034a:	4b61      	ldr	r3, [pc, #388]	@ (80004d0 <motor_run+0x384>)
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	4618      	mov	r0, r3
 8000350:	f000 fe54 	bl	8000ffc <HAL_Delay>

		  // phase 5
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 8000354:	2201      	movs	r2, #1
 8000356:	2110      	movs	r1, #16
 8000358:	485b      	ldr	r0, [pc, #364]	@ (80004c8 <motor_run+0x37c>)
 800035a:	f001 f8d7 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, abs(left_speed));
 800035e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000362:	2b00      	cmp	r3, #0
 8000364:	bfb8      	it	lt
 8000366:	425b      	neglt	r3, r3
 8000368:	b29a      	uxth	r2, r3
 800036a:	4b58      	ldr	r3, [pc, #352]	@ (80004cc <motor_run+0x380>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 8000370:	2201      	movs	r2, #1
 8000372:	2120      	movs	r1, #32
 8000374:	4854      	ldr	r0, [pc, #336]	@ (80004c8 <motor_run+0x37c>)
 8000376:	f001 f8c9 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800037a:	4b54      	ldr	r3, [pc, #336]	@ (80004cc <motor_run+0x380>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2200      	movs	r2, #0
 8000380:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 0);
 8000382:	2200      	movs	r2, #0
 8000384:	2140      	movs	r1, #64	@ 0x40
 8000386:	4850      	ldr	r0, [pc, #320]	@ (80004c8 <motor_run+0x37c>)
 8000388:	f001 f8c0 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800038c:	4b4f      	ldr	r3, [pc, #316]	@ (80004cc <motor_run+0x380>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2200      	movs	r2, #0
 8000392:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 8000394:	4b4e      	ldr	r3, [pc, #312]	@ (80004d0 <motor_run+0x384>)
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fe2f 	bl	8000ffc <HAL_Delay>

		  // phase 4
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 800039e:	2201      	movs	r2, #1
 80003a0:	2110      	movs	r1, #16
 80003a2:	4849      	ldr	r0, [pc, #292]	@ (80004c8 <motor_run+0x37c>)
 80003a4:	f001 f8b2 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, abs(left_speed));
 80003a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bfb8      	it	lt
 80003b0:	425b      	neglt	r3, r3
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b45      	ldr	r3, [pc, #276]	@ (80004cc <motor_run+0x380>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2120      	movs	r1, #32
 80003be:	4842      	ldr	r0, [pc, #264]	@ (80004c8 <motor_run+0x37c>)
 80003c0:	f001 f8a4 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80003c4:	4b41      	ldr	r3, [pc, #260]	@ (80004cc <motor_run+0x380>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2200      	movs	r2, #0
 80003ca:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2140      	movs	r1, #64	@ 0x40
 80003d0:	483d      	ldr	r0, [pc, #244]	@ (80004c8 <motor_run+0x37c>)
 80003d2:	f001 f89b 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80003d6:	4b3d      	ldr	r3, [pc, #244]	@ (80004cc <motor_run+0x380>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2200      	movs	r2, #0
 80003dc:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 80003de:	4b3c      	ldr	r3, [pc, #240]	@ (80004d0 <motor_run+0x384>)
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fe0a 	bl	8000ffc <HAL_Delay>

		  // phase 3
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 0);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2110      	movs	r1, #16
 80003ec:	4836      	ldr	r0, [pc, #216]	@ (80004c8 <motor_run+0x37c>)
 80003ee:	f001 f88d 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80003f2:	4b36      	ldr	r3, [pc, #216]	@ (80004cc <motor_run+0x380>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2200      	movs	r2, #0
 80003f8:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2120      	movs	r1, #32
 80003fe:	4832      	ldr	r0, [pc, #200]	@ (80004c8 <motor_run+0x37c>)
 8000400:	f001 f884 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, abs(left_speed));
 8000404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000408:	2b00      	cmp	r3, #0
 800040a:	bfb8      	it	lt
 800040c:	425b      	neglt	r3, r3
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b2e      	ldr	r3, [pc, #184]	@ (80004cc <motor_run+0x380>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 8000416:	2201      	movs	r2, #1
 8000418:	2140      	movs	r1, #64	@ 0x40
 800041a:	482b      	ldr	r0, [pc, #172]	@ (80004c8 <motor_run+0x37c>)
 800041c:	f001 f876 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <motor_run+0x380>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2200      	movs	r2, #0
 8000426:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 8000428:	4b29      	ldr	r3, [pc, #164]	@ (80004d0 <motor_run+0x384>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fde5 	bl	8000ffc <HAL_Delay>

		  // phase 2
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 8000432:	2201      	movs	r2, #1
 8000434:	2110      	movs	r1, #16
 8000436:	4824      	ldr	r0, [pc, #144]	@ (80004c8 <motor_run+0x37c>)
 8000438:	f001 f868 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800043c:	4b23      	ldr	r3, [pc, #140]	@ (80004cc <motor_run+0x380>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2200      	movs	r2, #0
 8000442:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 8000444:	2201      	movs	r2, #1
 8000446:	2120      	movs	r1, #32
 8000448:	481f      	ldr	r0, [pc, #124]	@ (80004c8 <motor_run+0x37c>)
 800044a:	f001 f85f 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, abs(left_speed));
 800044e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000452:	2b00      	cmp	r3, #0
 8000454:	bfb8      	it	lt
 8000456:	425b      	neglt	r3, r3
 8000458:	b29a      	uxth	r2, r3
 800045a:	4b1c      	ldr	r3, [pc, #112]	@ (80004cc <motor_run+0x380>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 0);
 8000460:	2200      	movs	r2, #0
 8000462:	2140      	movs	r1, #64	@ 0x40
 8000464:	4818      	ldr	r0, [pc, #96]	@ (80004c8 <motor_run+0x37c>)
 8000466:	f001 f851 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800046a:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <motor_run+0x380>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2200      	movs	r2, #0
 8000470:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 8000472:	4b17      	ldr	r3, [pc, #92]	@ (80004d0 <motor_run+0x384>)
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fdc0 	bl	8000ffc <HAL_Delay>

		  // phase 1
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 800047c:	2201      	movs	r2, #1
 800047e:	2110      	movs	r1, #16
 8000480:	4811      	ldr	r0, [pc, #68]	@ (80004c8 <motor_run+0x37c>)
 8000482:	f001 f843 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, abs(left_speed));
 8000486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800048a:	2b00      	cmp	r3, #0
 800048c:	bfb8      	it	lt
 800048e:	425b      	neglt	r3, r3
 8000490:	b29a      	uxth	r2, r3
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <motor_run+0x380>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 0);
 8000498:	2200      	movs	r2, #0
 800049a:	2120      	movs	r1, #32
 800049c:	480a      	ldr	r0, [pc, #40]	@ (80004c8 <motor_run+0x37c>)
 800049e:	f001 f835 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80004a2:	4b0a      	ldr	r3, [pc, #40]	@ (80004cc <motor_run+0x380>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2200      	movs	r2, #0
 80004a8:	639a      	str	r2, [r3, #56]	@ 0x38

		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2140      	movs	r1, #64	@ 0x40
 80004ae:	4806      	ldr	r0, [pc, #24]	@ (80004c8 <motor_run+0x37c>)
 80004b0:	f001 f82c 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80004b4:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <motor_run+0x380>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2200      	movs	r2, #0
 80004ba:	63da      	str	r2, [r3, #60]	@ 0x3c

		  HAL_Delay(motor_speed);
 80004bc:	4b04      	ldr	r3, [pc, #16]	@ (80004d0 <motor_run+0x384>)
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fd9b 	bl	8000ffc <HAL_Delay>
 80004c6:	e020      	b.n	800050a <motor_run+0x3be>
 80004c8:	40010800 	.word	0x40010800
 80004cc:	2000002c 	.word	0x2000002c
 80004d0:	20000000 	.word	0x20000000
	}
	else
	{
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2110      	movs	r1, #16
 80004d8:	4872      	ldr	r0, [pc, #456]	@ (80006a4 <motor_run+0x558>)
 80004da:	f001 f817 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80004de:	4b72      	ldr	r3, [pc, #456]	@ (80006a8 <motor_run+0x55c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2200      	movs	r2, #0
 80004e4:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2120      	movs	r1, #32
 80004ea:	486e      	ldr	r0, [pc, #440]	@ (80006a4 <motor_run+0x558>)
 80004ec:	f001 f80e 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80004f0:	4b6d      	ldr	r3, [pc, #436]	@ (80006a8 <motor_run+0x55c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2140      	movs	r1, #64	@ 0x40
 80004fc:	4869      	ldr	r0, [pc, #420]	@ (80006a4 <motor_run+0x558>)
 80004fe:	f001 f805 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000502:	4b69      	ldr	r3, [pc, #420]	@ (80006a8 <motor_run+0x55c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	if(right_speed > 0)
 800050a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	f340 80d0 	ble.w	80006b4 <motor_run+0x568>
	{
		// phase 1
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	2110      	movs	r1, #16
 8000518:	4862      	ldr	r0, [pc, #392]	@ (80006a4 <motor_run+0x558>)
 800051a:	f000 fff7 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800051e:	4b62      	ldr	r3, [pc, #392]	@ (80006a8 <motor_run+0x55c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2200      	movs	r2, #0
 8000524:	641a      	str	r2, [r3, #64]	@ 0x40

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2120      	movs	r1, #32
 800052a:	485e      	ldr	r0, [pc, #376]	@ (80006a4 <motor_run+0x558>)
 800052c:	f000 ffee 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000530:	4b5e      	ldr	r3, [pc, #376]	@ (80006ac <motor_run+0x560>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2200      	movs	r2, #0
 8000536:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	2140      	movs	r1, #64	@ 0x40
 800053c:	4859      	ldr	r0, [pc, #356]	@ (80006a4 <motor_run+0x558>)
 800053e:	f000 ffe5 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, right_speed);
 8000542:	4b5a      	ldr	r3, [pc, #360]	@ (80006ac <motor_run+0x560>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800054a:	639a      	str	r2, [r3, #56]	@ 0x38

		  HAL_Delay(motor_speed);
 800054c:	4b58      	ldr	r3, [pc, #352]	@ (80006b0 <motor_run+0x564>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fd53 	bl	8000ffc <HAL_Delay>

		  // phase 2
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 8000556:	2201      	movs	r2, #1
 8000558:	2110      	movs	r1, #16
 800055a:	4852      	ldr	r0, [pc, #328]	@ (80006a4 <motor_run+0x558>)
 800055c:	f000 ffd6 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000560:	4b51      	ldr	r3, [pc, #324]	@ (80006a8 <motor_run+0x55c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	641a      	str	r2, [r3, #64]	@ 0x40

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 8000568:	2201      	movs	r2, #1
 800056a:	2120      	movs	r1, #32
 800056c:	484d      	ldr	r0, [pc, #308]	@ (80006a4 <motor_run+0x558>)
 800056e:	f000 ffcd 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, right_speed);
 8000572:	4b4e      	ldr	r3, [pc, #312]	@ (80006ac <motor_run+0x560>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800057a:	635a      	str	r2, [r3, #52]	@ 0x34


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	@ 0x40
 8000580:	4848      	ldr	r0, [pc, #288]	@ (80006a4 <motor_run+0x558>)
 8000582:	f000 ffc3 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000586:	4b49      	ldr	r3, [pc, #292]	@ (80006ac <motor_run+0x560>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	639a      	str	r2, [r3, #56]	@ 0x38

		  HAL_Delay(motor_speed);
 800058e:	4b48      	ldr	r3, [pc, #288]	@ (80006b0 <motor_run+0x564>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fd32 	bl	8000ffc <HAL_Delay>

		  // phase 3
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2110      	movs	r1, #16
 800059c:	4841      	ldr	r0, [pc, #260]	@ (80006a4 <motor_run+0x558>)
 800059e:	f000 ffb5 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80005a2:	4b41      	ldr	r3, [pc, #260]	@ (80006a8 <motor_run+0x55c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2200      	movs	r2, #0
 80005a8:	641a      	str	r2, [r3, #64]	@ 0x40

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2120      	movs	r1, #32
 80005ae:	483d      	ldr	r0, [pc, #244]	@ (80006a4 <motor_run+0x558>)
 80005b0:	f000 ffac 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, right_speed);
 80005b4:	4b3d      	ldr	r3, [pc, #244]	@ (80006ac <motor_run+0x560>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005bc:	635a      	str	r2, [r3, #52]	@ 0x34


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 80005be:	2201      	movs	r2, #1
 80005c0:	2140      	movs	r1, #64	@ 0x40
 80005c2:	4838      	ldr	r0, [pc, #224]	@ (80006a4 <motor_run+0x558>)
 80005c4:	f000 ffa2 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80005c8:	4b38      	ldr	r3, [pc, #224]	@ (80006ac <motor_run+0x560>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2200      	movs	r2, #0
 80005ce:	639a      	str	r2, [r3, #56]	@ 0x38

		  HAL_Delay(motor_speed);
 80005d0:	4b37      	ldr	r3, [pc, #220]	@ (80006b0 <motor_run+0x564>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fd11 	bl	8000ffc <HAL_Delay>

		  // phase 4
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	2110      	movs	r1, #16
 80005de:	4831      	ldr	r0, [pc, #196]	@ (80006a4 <motor_run+0x558>)
 80005e0:	f000 ff94 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, right_speed);
 80005e4:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <motor_run+0x55c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005ec:	641a      	str	r2, [r3, #64]	@ 0x40

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	482c      	ldr	r0, [pc, #176]	@ (80006a4 <motor_run+0x558>)
 80005f4:	f000 ff8a 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80005f8:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <motor_run+0x560>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2200      	movs	r2, #0
 80005fe:	635a      	str	r2, [r3, #52]	@ 0x34


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	2140      	movs	r1, #64	@ 0x40
 8000604:	4827      	ldr	r0, [pc, #156]	@ (80006a4 <motor_run+0x558>)
 8000606:	f000 ff81 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800060a:	4b28      	ldr	r3, [pc, #160]	@ (80006ac <motor_run+0x560>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	639a      	str	r2, [r3, #56]	@ 0x38

		  HAL_Delay(motor_speed);
 8000612:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <motor_run+0x564>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fcf0 	bl	8000ffc <HAL_Delay>

		  // phase 5
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	2110      	movs	r1, #16
 8000620:	4820      	ldr	r0, [pc, #128]	@ (80006a4 <motor_run+0x558>)
 8000622:	f000 ff73 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, right_speed);
 8000626:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <motor_run+0x55c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800062e:	641a      	str	r2, [r3, #64]	@ 0x40

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 8000630:	2201      	movs	r2, #1
 8000632:	2120      	movs	r1, #32
 8000634:	481b      	ldr	r0, [pc, #108]	@ (80006a4 <motor_run+0x558>)
 8000636:	f000 ff69 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800063a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <motor_run+0x560>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	635a      	str	r2, [r3, #52]	@ 0x34


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2140      	movs	r1, #64	@ 0x40
 8000646:	4817      	ldr	r0, [pc, #92]	@ (80006a4 <motor_run+0x558>)
 8000648:	f000 ff60 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <motor_run+0x560>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2200      	movs	r2, #0
 8000652:	639a      	str	r2, [r3, #56]	@ 0x38

		  HAL_Delay(motor_speed);
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <motor_run+0x564>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fccf 	bl	8000ffc <HAL_Delay>

		  // phase 6
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2110      	movs	r1, #16
 8000662:	4810      	ldr	r0, [pc, #64]	@ (80006a4 <motor_run+0x558>)
 8000664:	f000 ff52 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <motor_run+0x55c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	641a      	str	r2, [r3, #64]	@ 0x40

		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	2120      	movs	r1, #32
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <motor_run+0x558>)
 8000676:	f000 ff49 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <motor_run+0x560>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2200      	movs	r2, #0
 8000680:	635a      	str	r2, [r3, #52]	@ 0x34


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	2140      	movs	r1, #64	@ 0x40
 8000686:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <motor_run+0x558>)
 8000688:	f000 ff40 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, right_speed);
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <motor_run+0x560>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000694:	639a      	str	r2, [r3, #56]	@ 0x38

		  HAL_Delay(motor_speed);
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <motor_run+0x564>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fcae 	bl	8000ffc <HAL_Delay>


		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 0);
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	}
}
 80006a0:	e107      	b.n	80008b2 <motor_run+0x766>
 80006a2:	bf00      	nop
 80006a4:	40010800 	.word	0x40010800
 80006a8:	2000002c 	.word	0x2000002c
 80006ac:	20000074 	.word	0x20000074
 80006b0:	20000000 	.word	0x20000000
	else if(right_speed < 0)
 80006b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	f280 80df 	bge.w	800087c <motor_run+0x730>
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2110      	movs	r1, #16
 80006c2:	487e      	ldr	r0, [pc, #504]	@ (80008bc <motor_run+0x770>)
 80006c4:	f000 ff22 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80006c8:	4b7d      	ldr	r3, [pc, #500]	@ (80008c0 <motor_run+0x774>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2200      	movs	r2, #0
 80006ce:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2120      	movs	r1, #32
 80006d4:	4879      	ldr	r0, [pc, #484]	@ (80008bc <motor_run+0x770>)
 80006d6:	f000 ff19 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80006da:	4b7a      	ldr	r3, [pc, #488]	@ (80008c4 <motor_run+0x778>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2200      	movs	r2, #0
 80006e0:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2140      	movs	r1, #64	@ 0x40
 80006e6:	4875      	ldr	r0, [pc, #468]	@ (80008bc <motor_run+0x770>)
 80006e8:	f000 ff10 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, abs(right_speed));
 80006ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	bfb8      	it	lt
 80006f4:	425b      	neglt	r3, r3
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b72      	ldr	r3, [pc, #456]	@ (80008c4 <motor_run+0x778>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_Delay(motor_speed);
 80006fe:	4b72      	ldr	r3, [pc, #456]	@ (80008c8 <motor_run+0x77c>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fc7a 	bl	8000ffc <HAL_Delay>
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	2110      	movs	r1, #16
 800070c:	486b      	ldr	r0, [pc, #428]	@ (80008bc <motor_run+0x770>)
 800070e:	f000 fefd 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, abs(right_speed));
 8000712:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	bfb8      	it	lt
 800071a:	425b      	neglt	r3, r3
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b68      	ldr	r3, [pc, #416]	@ (80008c0 <motor_run+0x774>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	2120      	movs	r1, #32
 8000728:	4864      	ldr	r0, [pc, #400]	@ (80008bc <motor_run+0x770>)
 800072a:	f000 feef 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800072e:	4b65      	ldr	r3, [pc, #404]	@ (80008c4 <motor_run+0x778>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2140      	movs	r1, #64	@ 0x40
 800073a:	4860      	ldr	r0, [pc, #384]	@ (80008bc <motor_run+0x770>)
 800073c:	f000 fee6 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000740:	4b60      	ldr	r3, [pc, #384]	@ (80008c4 <motor_run+0x778>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2200      	movs	r2, #0
 8000746:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_Delay(motor_speed);
 8000748:	4b5f      	ldr	r3, [pc, #380]	@ (80008c8 <motor_run+0x77c>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fc55 	bl	8000ffc <HAL_Delay>
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 8000752:	2201      	movs	r2, #1
 8000754:	2110      	movs	r1, #16
 8000756:	4859      	ldr	r0, [pc, #356]	@ (80008bc <motor_run+0x770>)
 8000758:	f000 fed8 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, abs(right_speed));
 800075c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	bfb8      	it	lt
 8000764:	425b      	neglt	r3, r3
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b55      	ldr	r3, [pc, #340]	@ (80008c0 <motor_run+0x774>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	4852      	ldr	r0, [pc, #328]	@ (80008bc <motor_run+0x770>)
 8000774:	f000 feca 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000778:	4b52      	ldr	r3, [pc, #328]	@ (80008c4 <motor_run+0x778>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2200      	movs	r2, #0
 800077e:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 8000780:	2201      	movs	r2, #1
 8000782:	2140      	movs	r1, #64	@ 0x40
 8000784:	484d      	ldr	r0, [pc, #308]	@ (80008bc <motor_run+0x770>)
 8000786:	f000 fec1 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800078a:	4b4e      	ldr	r3, [pc, #312]	@ (80008c4 <motor_run+0x778>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2200      	movs	r2, #0
 8000790:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_Delay(motor_speed);
 8000792:	4b4d      	ldr	r3, [pc, #308]	@ (80008c8 <motor_run+0x77c>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fc30 	bl	8000ffc <HAL_Delay>
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2110      	movs	r1, #16
 80007a0:	4846      	ldr	r0, [pc, #280]	@ (80008bc <motor_run+0x770>)
 80007a2:	f000 feb3 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80007a6:	4b46      	ldr	r3, [pc, #280]	@ (80008c0 <motor_run+0x774>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2200      	movs	r2, #0
 80007ac:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2120      	movs	r1, #32
 80007b2:	4842      	ldr	r0, [pc, #264]	@ (80008bc <motor_run+0x770>)
 80007b4:	f000 feaa 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, abs(right_speed));
 80007b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bfb8      	it	lt
 80007c0:	425b      	neglt	r3, r3
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b3f      	ldr	r3, [pc, #252]	@ (80008c4 <motor_run+0x778>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2140      	movs	r1, #64	@ 0x40
 80007ce:	483b      	ldr	r0, [pc, #236]	@ (80008bc <motor_run+0x770>)
 80007d0:	f000 fe9c 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80007d4:	4b3b      	ldr	r3, [pc, #236]	@ (80008c4 <motor_run+0x778>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2200      	movs	r2, #0
 80007da:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_Delay(motor_speed);
 80007dc:	4b3a      	ldr	r3, [pc, #232]	@ (80008c8 <motor_run+0x77c>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fc0b 	bl	8000ffc <HAL_Delay>
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2110      	movs	r1, #16
 80007ea:	4834      	ldr	r0, [pc, #208]	@ (80008bc <motor_run+0x770>)
 80007ec:	f000 fe8e 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80007f0:	4b33      	ldr	r3, [pc, #204]	@ (80008c0 <motor_run+0x774>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2200      	movs	r2, #0
 80007f6:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 1);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2120      	movs	r1, #32
 80007fc:	482f      	ldr	r0, [pc, #188]	@ (80008bc <motor_run+0x770>)
 80007fe:	f000 fe85 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, abs(right_speed));
 8000802:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bfb8      	it	lt
 800080a:	425b      	neglt	r3, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <motor_run+0x778>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2140      	movs	r1, #64	@ 0x40
 8000818:	4828      	ldr	r0, [pc, #160]	@ (80008bc <motor_run+0x770>)
 800081a:	f000 fe77 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800081e:	4b29      	ldr	r3, [pc, #164]	@ (80008c4 <motor_run+0x778>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2200      	movs	r2, #0
 8000824:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_Delay(motor_speed);
 8000826:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <motor_run+0x77c>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fbe6 	bl	8000ffc <HAL_Delay>
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 1);
 8000830:	2201      	movs	r2, #1
 8000832:	2110      	movs	r1, #16
 8000834:	4821      	ldr	r0, [pc, #132]	@ (80008bc <motor_run+0x770>)
 8000836:	f000 fe69 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, abs(right_speed));
 800083a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	bfb8      	it	lt
 8000842:	425b      	neglt	r3, r3
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <motor_run+0x774>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2120      	movs	r1, #32
 8000850:	481a      	ldr	r0, [pc, #104]	@ (80008bc <motor_run+0x770>)
 8000852:	f000 fe5b 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000856:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <motor_run+0x778>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2200      	movs	r2, #0
 800085c:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	2140      	movs	r1, #64	@ 0x40
 8000862:	4816      	ldr	r0, [pc, #88]	@ (80008bc <motor_run+0x770>)
 8000864:	f000 fe52 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000868:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <motor_run+0x778>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_Delay(motor_speed);
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <motor_run+0x77c>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fbc1 	bl	8000ffc <HAL_Delay>
}
 800087a:	e01a      	b.n	80008b2 <motor_run+0x766>
		  HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2110      	movs	r1, #16
 8000880:	480e      	ldr	r0, [pc, #56]	@ (80008bc <motor_run+0x770>)
 8000882:	f000 fe43 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <motor_run+0x774>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2200      	movs	r2, #0
 800088c:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2120      	movs	r1, #32
 8000892:	480a      	ldr	r0, [pc, #40]	@ (80008bc <motor_run+0x770>)
 8000894:	f000 fe3a 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000898:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <motor_run+0x778>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2200      	movs	r2, #0
 800089e:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_GPIO_WritePin(ENC_GPIO_Port, ENC_Pin, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2140      	movs	r1, #64	@ 0x40
 80008a4:	4805      	ldr	r0, [pc, #20]	@ (80008bc <motor_run+0x770>)
 80008a6:	f000 fe31 	bl	800150c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <motor_run+0x778>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2200      	movs	r2, #0
 80008b0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40010800 	.word	0x40010800
 80008c0:	2000002c 	.word	0x2000002c
 80008c4:	20000074 	.word	0x20000074
 80008c8:	20000000 	.word	0x20000000

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d0:	f000 fb62 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d4:	f000 f83c 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d8:	f000 f960 	bl	8000b9c <MX_GPIO_Init>
  MX_TIM2_Init();
 80008dc:	f000 f87e 	bl	80009dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80008e0:	f000 f8f6 	bl	8000ad0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80008e4:	2100      	movs	r1, #0
 80008e6:	4815      	ldr	r0, [pc, #84]	@ (800093c <main+0x70>)
 80008e8:	f001 fb4e 	bl	8001f88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80008ec:	2104      	movs	r1, #4
 80008ee:	4813      	ldr	r0, [pc, #76]	@ (800093c <main+0x70>)
 80008f0:	f001 fb4a 	bl	8001f88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80008f4:	2108      	movs	r1, #8
 80008f6:	4811      	ldr	r0, [pc, #68]	@ (800093c <main+0x70>)
 80008f8:	f001 fb46 	bl	8001f88 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80008fc:	210c      	movs	r1, #12
 80008fe:	480f      	ldr	r0, [pc, #60]	@ (800093c <main+0x70>)
 8000900:	f001 fb42 	bl	8001f88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000904:	2100      	movs	r1, #0
 8000906:	480e      	ldr	r0, [pc, #56]	@ (8000940 <main+0x74>)
 8000908:	f001 fb3e 	bl	8001f88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800090c:	2104      	movs	r1, #4
 800090e:	480c      	ldr	r0, [pc, #48]	@ (8000940 <main+0x74>)
 8000910:	f001 fb3a 	bl	8001f88 <HAL_TIM_PWM_Start>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(enable)
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <main+0x78>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d00a      	beq.n	8000932 <main+0x66>
	{
		motor_run(left_speed, right_speed);
 800091c:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <main+0x7c>)
 800091e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <main+0x80>)
 8000924:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fc0e 	bl	800014c <motor_run>
 8000930:	e7f0      	b.n	8000914 <main+0x48>
	}
	else
	{
		motor_run(0, 0);
 8000932:	2100      	movs	r1, #0
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fc09 	bl	800014c <motor_run>
	if(enable)
 800093a:	e7eb      	b.n	8000914 <main+0x48>
 800093c:	2000002c 	.word	0x2000002c
 8000940:	20000074 	.word	0x20000074
 8000944:	200000c0 	.word	0x200000c0
 8000948:	200000bc 	.word	0x200000bc
 800094c:	200000be 	.word	0x200000be

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b090      	sub	sp, #64	@ 0x40
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	2228      	movs	r2, #40	@ 0x28
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f002 f814 	bl	800298c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000976:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800097a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000988:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800098c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800098e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0318 	add.w	r3, r7, #24
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fdcf 	bl	800153c <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009a4:	f000 f956 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	230f      	movs	r3, #15
 80009aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2302      	movs	r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2102      	movs	r1, #2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f83c 	bl	8001a40 <HAL_RCC_ClockConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009ce:	f000 f941 	bl	8000c54 <Error_Handler>
  }
}
 80009d2:	bf00      	nop
 80009d4:	3740      	adds	r7, #64	@ 0x40
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
 80009fa:	615a      	str	r2, [r3, #20]
 80009fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009fe:	4b33      	ldr	r3, [pc, #204]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000a00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 8000a06:	4b31      	ldr	r3, [pc, #196]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000a08:	f240 529f 	movw	r2, #1439	@ 0x59f
 8000a0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000a14:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000a16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a28:	4828      	ldr	r0, [pc, #160]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000a2a:	f001 fa5d 	bl	8001ee8 <HAL_TIM_PWM_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a34:	f000 f90e 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4619      	mov	r1, r3
 8000a46:	4821      	ldr	r0, [pc, #132]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000a48:	f001 ff30 	bl	80028ac <HAL_TIMEx_MasterConfigSynchronization>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a52:	f000 f8ff 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a56:	2360      	movs	r3, #96	@ 0x60
 8000a58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4817      	ldr	r0, [pc, #92]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000a6e:	f001 fc1d 	bl	80022ac <HAL_TIM_PWM_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a78:	f000 f8ec 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2204      	movs	r2, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	4812      	ldr	r0, [pc, #72]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000a84:	f001 fc12 	bl	80022ac <HAL_TIM_PWM_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000a8e:	f000 f8e1 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2208      	movs	r2, #8
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000a9a:	f001 fc07 	bl	80022ac <HAL_TIM_PWM_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000aa4:	f000 f8d6 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	220c      	movs	r2, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	4807      	ldr	r0, [pc, #28]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000ab0:	f001 fbfc 	bl	80022ac <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000aba:	f000 f8cb 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000abe:	4803      	ldr	r0, [pc, #12]	@ (8000acc <MX_TIM2_Init+0xf0>)
 8000ac0:	f000 f930 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	@ 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000002c 	.word	0x2000002c

08000ad0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af2:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <MX_TIM3_Init+0xc4>)
 8000af4:	4a28      	ldr	r2, [pc, #160]	@ (8000b98 <MX_TIM3_Init+0xc8>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1440-1;
 8000af8:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <MX_TIM3_Init+0xc4>)
 8000afa:	f240 529f 	movw	r2, #1439	@ 0x59f
 8000afe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <MX_TIM3_Init+0xc4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b06:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <MX_TIM3_Init+0xc4>)
 8000b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <MX_TIM3_Init+0xc4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <MX_TIM3_Init+0xc4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b1a:	481e      	ldr	r0, [pc, #120]	@ (8000b94 <MX_TIM3_Init+0xc4>)
 8000b1c:	f001 f9e4 	bl	8001ee8 <HAL_TIM_PWM_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b26:	f000 f895 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	4619      	mov	r1, r3
 8000b38:	4816      	ldr	r0, [pc, #88]	@ (8000b94 <MX_TIM3_Init+0xc4>)
 8000b3a:	f001 feb7 	bl	80028ac <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000b44:	f000 f886 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b48:	2360      	movs	r3, #96	@ 0x60
 8000b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <MX_TIM3_Init+0xc4>)
 8000b60:	f001 fba4 	bl	80022ac <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000b6a:	f000 f873 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2204      	movs	r2, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <MX_TIM3_Init+0xc4>)
 8000b76:	f001 fb99 	bl	80022ac <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b80:	f000 f868 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <MX_TIM3_Init+0xc4>)
 8000b86:	f000 f8cd 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	@ 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000074 	.word	0x20000074
 8000b98:	40000400 	.word	0x40000400

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_GPIO_Init+0x8c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <MX_GPIO_Init+0x8c>)
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_GPIO_Init+0x8c>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0320 	and.w	r3, r3, #32
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <MX_GPIO_Init+0x8c>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a16      	ldr	r2, [pc, #88]	@ (8000c28 <MX_GPIO_Init+0x8c>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_GPIO_Init+0x8c>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_GPIO_Init+0x8c>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <MX_GPIO_Init+0x8c>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_GPIO_Init+0x8c>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENA_Pin|ENB_Pin|ENC_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2170      	movs	r1, #112	@ 0x70
 8000bfc:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <MX_GPIO_Init+0x90>)
 8000bfe:	f000 fc85 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENA_Pin ENB_Pin ENC_Pin */
  GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin|ENC_Pin;
 8000c02:	2370      	movs	r3, #112	@ 0x70
 8000c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4619      	mov	r1, r3
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <MX_GPIO_Init+0x90>)
 8000c1a:	f000 faf3 	bl	8001204 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010800 	.word	0x40010800

08000c30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d101      	bne.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c42:	f000 f9bf 	bl	8000fc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40012c00 	.word	0x40012c00

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <Error_Handler+0x8>

08000c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_MspInit+0x5c>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <HAL_MspInit+0x5c>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_MspInit+0x5c>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <HAL_MspInit+0x5c>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a0e      	ldr	r2, [pc, #56]	@ (8000cbc <HAL_MspInit+0x5c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <HAL_MspInit+0x5c>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c96:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <HAL_MspInit+0x60>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <HAL_MspInit+0x60>)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010000 	.word	0x40010000

08000cc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cd4:	d10c      	bne.n	8000cf0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <HAL_TIM_PWM_MspInit+0x58>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a10      	ldr	r2, [pc, #64]	@ (8000d1c <HAL_TIM_PWM_MspInit+0x58>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	61d3      	str	r3, [r2, #28]
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <HAL_TIM_PWM_MspInit+0x58>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cee:	e010      	b.n	8000d12 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <HAL_TIM_PWM_MspInit+0x5c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d10b      	bne.n	8000d12 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_TIM_PWM_MspInit+0x58>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <HAL_TIM_PWM_MspInit+0x58>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_TIM_PWM_MspInit+0x58>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40000400 	.word	0x40000400

08000d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d42:	d118      	bne.n	8000d76 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <HAL_TIM_MspPostInit+0xb8>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a24      	ldr	r2, [pc, #144]	@ (8000ddc <HAL_TIM_MspPostInit+0xb8>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <HAL_TIM_MspPostInit+0xb8>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481c      	ldr	r0, [pc, #112]	@ (8000de0 <HAL_TIM_MspPostInit+0xbc>)
 8000d70:	f000 fa48 	bl	8001204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d74:	e02e      	b.n	8000dd4 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8000de4 <HAL_TIM_MspPostInit+0xc0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d129      	bne.n	8000dd4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <HAL_TIM_MspPostInit+0xb8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a15      	ldr	r2, [pc, #84]	@ (8000ddc <HAL_TIM_MspPostInit+0xb8>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <HAL_TIM_MspPostInit+0xb8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d98:	2330      	movs	r3, #48	@ 0x30
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	480f      	ldr	r0, [pc, #60]	@ (8000de8 <HAL_TIM_MspPostInit+0xc4>)
 8000dac:	f000 fa2a 	bl	8001204 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_TIM_MspPostInit+0xc8>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dce:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <HAL_TIM_MspPostInit+0xc8>)
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd2:	6053      	str	r3, [r2, #4]
}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	@ 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40000400 	.word	0x40000400
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	40010000 	.word	0x40010000

08000df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	@ 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e06:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec0 <HAL_InitTick+0xd0>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec0 <HAL_InitTick+0xd0>)
 8000e0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e10:	6193      	str	r3, [r2, #24]
 8000e12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec0 <HAL_InitTick+0xd0>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e1e:	f107 020c 	add.w	r2, r7, #12
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 ff65 	bl	8001cf8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e2e:	f000 ff4f 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 8000e32:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e36:	4a23      	ldr	r2, [pc, #140]	@ (8000ec4 <HAL_InitTick+0xd4>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	0c9b      	lsrs	r3, r3, #18
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e44:	4a21      	ldr	r2, [pc, #132]	@ (8000ecc <HAL_InitTick+0xdc>)
 8000e46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e4e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e54:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e68:	4817      	ldr	r0, [pc, #92]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e6a:	f000 ff93 	bl	8001d94 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d11b      	bne.n	8000eb4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e7c:	4812      	ldr	r0, [pc, #72]	@ (8000ec8 <HAL_InitTick+0xd8>)
 8000e7e:	f000 ffe1 	bl	8001e44 <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d111      	bne.n	8000eb4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e90:	2019      	movs	r0, #25
 8000e92:	f000 f9a8 	bl	80011e6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d808      	bhi.n	8000eae <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2019      	movs	r0, #25
 8000ea2:	f000 f984 	bl	80011ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <HAL_InitTick+0xe0>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e002      	b.n	8000eb4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3730      	adds	r7, #48	@ 0x30
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	431bde83 	.word	0x431bde83
 8000ec8:	200000c4 	.word	0x200000c4
 8000ecc:	40012c00 	.word	0x40012c00
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f30:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <TIM1_UP_IRQHandler+0x10>)
 8000f32:	f001 f8cb 	bl	80020cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000c4 	.word	0x200000c4

08000f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff fff8 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f52:	490c      	ldr	r1, [pc, #48]	@ (8000f84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f54:	4a0c      	ldr	r2, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a09      	ldr	r2, [pc, #36]	@ (8000f8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f68:	4c09      	ldr	r4, [pc, #36]	@ (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f001 fd11 	bl	800299c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7a:	f7ff fca7 	bl	80008cc <main>
  bx lr
 8000f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f88:	08002a30 	.word	0x08002a30
  ldr r2, =_sbss
 8000f8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f90:	20000110 	.word	0x20000110

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_Init+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	@ (8000fc0 <HAL_Init+0x28>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f8f5 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f7ff ff1e 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fe54 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <HAL_IncTick+0x20>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a03      	ldr	r2, [pc, #12]	@ (8000fe4 <HAL_IncTick+0x20>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	2000010c 	.word	0x2000010c

08000fe8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b02      	ldr	r3, [pc, #8]	@ (8000ff8 <HAL_GetTick+0x10>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	2000010c 	.word	0x2000010c

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff fff0 	bl	8000fe8 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffe0 	bl	8000fe8 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000000c 	.word	0x2000000c

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0b      	blt.n	80010d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4906      	ldr	r1, [pc, #24]	@ (80010dc <__NVIC_EnableIRQ+0x34>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	@ (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	@ (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	@ 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	@ 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff4f 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff64 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ffb2 	bl	8001134 <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff81 	bl	80010e0 <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff57 	bl	80010a8 <__NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b08b      	sub	sp, #44	@ 0x2c
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001216:	e169      	b.n	80014ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001218:	2201      	movs	r2, #1
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	429a      	cmp	r2, r3
 8001232:	f040 8158 	bne.w	80014e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4a9a      	ldr	r2, [pc, #616]	@ (80014a4 <HAL_GPIO_Init+0x2a0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d05e      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
 8001240:	4a98      	ldr	r2, [pc, #608]	@ (80014a4 <HAL_GPIO_Init+0x2a0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d875      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 8001246:	4a98      	ldr	r2, [pc, #608]	@ (80014a8 <HAL_GPIO_Init+0x2a4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d058      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
 800124c:	4a96      	ldr	r2, [pc, #600]	@ (80014a8 <HAL_GPIO_Init+0x2a4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d86f      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 8001252:	4a96      	ldr	r2, [pc, #600]	@ (80014ac <HAL_GPIO_Init+0x2a8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d052      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
 8001258:	4a94      	ldr	r2, [pc, #592]	@ (80014ac <HAL_GPIO_Init+0x2a8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d869      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 800125e:	4a94      	ldr	r2, [pc, #592]	@ (80014b0 <HAL_GPIO_Init+0x2ac>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d04c      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
 8001264:	4a92      	ldr	r2, [pc, #584]	@ (80014b0 <HAL_GPIO_Init+0x2ac>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d863      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 800126a:	4a92      	ldr	r2, [pc, #584]	@ (80014b4 <HAL_GPIO_Init+0x2b0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d046      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
 8001270:	4a90      	ldr	r2, [pc, #576]	@ (80014b4 <HAL_GPIO_Init+0x2b0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d85d      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 8001276:	2b12      	cmp	r3, #18
 8001278:	d82a      	bhi.n	80012d0 <HAL_GPIO_Init+0xcc>
 800127a:	2b12      	cmp	r3, #18
 800127c:	d859      	bhi.n	8001332 <HAL_GPIO_Init+0x12e>
 800127e:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <HAL_GPIO_Init+0x80>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	080012ff 	.word	0x080012ff
 8001288:	080012d9 	.word	0x080012d9
 800128c:	080012eb 	.word	0x080012eb
 8001290:	0800132d 	.word	0x0800132d
 8001294:	08001333 	.word	0x08001333
 8001298:	08001333 	.word	0x08001333
 800129c:	08001333 	.word	0x08001333
 80012a0:	08001333 	.word	0x08001333
 80012a4:	08001333 	.word	0x08001333
 80012a8:	08001333 	.word	0x08001333
 80012ac:	08001333 	.word	0x08001333
 80012b0:	08001333 	.word	0x08001333
 80012b4:	08001333 	.word	0x08001333
 80012b8:	08001333 	.word	0x08001333
 80012bc:	08001333 	.word	0x08001333
 80012c0:	08001333 	.word	0x08001333
 80012c4:	08001333 	.word	0x08001333
 80012c8:	080012e1 	.word	0x080012e1
 80012cc:	080012f5 	.word	0x080012f5
 80012d0:	4a79      	ldr	r2, [pc, #484]	@ (80014b8 <HAL_GPIO_Init+0x2b4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012d6:	e02c      	b.n	8001332 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	623b      	str	r3, [r7, #32]
          break;
 80012de:	e029      	b.n	8001334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	3304      	adds	r3, #4
 80012e6:	623b      	str	r3, [r7, #32]
          break;
 80012e8:	e024      	b.n	8001334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	3308      	adds	r3, #8
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e01f      	b.n	8001334 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	330c      	adds	r3, #12
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e01a      	b.n	8001334 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001306:	2304      	movs	r3, #4
 8001308:	623b      	str	r3, [r7, #32]
          break;
 800130a:	e013      	b.n	8001334 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d105      	bne.n	8001320 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001314:	2308      	movs	r3, #8
 8001316:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	611a      	str	r2, [r3, #16]
          break;
 800131e:	e009      	b.n	8001334 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001320:	2308      	movs	r3, #8
 8001322:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	615a      	str	r2, [r3, #20]
          break;
 800132a:	e003      	b.n	8001334 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	e000      	b.n	8001334 <HAL_GPIO_Init+0x130>
          break;
 8001332:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	2bff      	cmp	r3, #255	@ 0xff
 8001338:	d801      	bhi.n	800133e <HAL_GPIO_Init+0x13a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	e001      	b.n	8001342 <HAL_GPIO_Init+0x13e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3304      	adds	r3, #4
 8001342:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2bff      	cmp	r3, #255	@ 0xff
 8001348:	d802      	bhi.n	8001350 <HAL_GPIO_Init+0x14c>
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	e002      	b.n	8001356 <HAL_GPIO_Init+0x152>
 8001350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001352:	3b08      	subs	r3, #8
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	210f      	movs	r1, #15
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	401a      	ands	r2, r3
 8001368:	6a39      	ldr	r1, [r7, #32]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	431a      	orrs	r2, r3
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80b1 	beq.w	80014e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001384:	4b4d      	ldr	r3, [pc, #308]	@ (80014bc <HAL_GPIO_Init+0x2b8>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a4c      	ldr	r2, [pc, #304]	@ (80014bc <HAL_GPIO_Init+0x2b8>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b4a      	ldr	r3, [pc, #296]	@ (80014bc <HAL_GPIO_Init+0x2b8>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800139c:	4a48      	ldr	r2, [pc, #288]	@ (80014c0 <HAL_GPIO_Init+0x2bc>)
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	4013      	ands	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a40      	ldr	r2, [pc, #256]	@ (80014c4 <HAL_GPIO_Init+0x2c0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d013      	beq.n	80013f0 <HAL_GPIO_Init+0x1ec>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a3f      	ldr	r2, [pc, #252]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d00d      	beq.n	80013ec <HAL_GPIO_Init+0x1e8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a3e      	ldr	r2, [pc, #248]	@ (80014cc <HAL_GPIO_Init+0x2c8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d007      	beq.n	80013e8 <HAL_GPIO_Init+0x1e4>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a3d      	ldr	r2, [pc, #244]	@ (80014d0 <HAL_GPIO_Init+0x2cc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d101      	bne.n	80013e4 <HAL_GPIO_Init+0x1e0>
 80013e0:	2303      	movs	r3, #3
 80013e2:	e006      	b.n	80013f2 <HAL_GPIO_Init+0x1ee>
 80013e4:	2304      	movs	r3, #4
 80013e6:	e004      	b.n	80013f2 <HAL_GPIO_Init+0x1ee>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e002      	b.n	80013f2 <HAL_GPIO_Init+0x1ee>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <HAL_GPIO_Init+0x1ee>
 80013f0:	2300      	movs	r3, #0
 80013f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013f4:	f002 0203 	and.w	r2, r2, #3
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4093      	lsls	r3, r2
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001402:	492f      	ldr	r1, [pc, #188]	@ (80014c0 <HAL_GPIO_Init+0x2bc>)
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800141c:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	492c      	ldr	r1, [pc, #176]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	608b      	str	r3, [r1, #8]
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	43db      	mvns	r3, r3
 8001432:	4928      	ldr	r1, [pc, #160]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001434:	4013      	ands	r3, r2
 8001436:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d006      	beq.n	8001452 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001444:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	4922      	ldr	r1, [pc, #136]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	60cb      	str	r3, [r1, #12]
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	43db      	mvns	r3, r3
 800145a:	491e      	ldr	r1, [pc, #120]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800145c:	4013      	ands	r3, r2
 800145e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800146c:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4918      	ldr	r1, [pc, #96]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	43db      	mvns	r3, r3
 8001482:	4914      	ldr	r1, [pc, #80]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001484:	4013      	ands	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d021      	beq.n	80014d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	490e      	ldr	r1, [pc, #56]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
 80014a0:	e021      	b.n	80014e6 <HAL_GPIO_Init+0x2e2>
 80014a2:	bf00      	nop
 80014a4:	10320000 	.word	0x10320000
 80014a8:	10310000 	.word	0x10310000
 80014ac:	10220000 	.word	0x10220000
 80014b0:	10210000 	.word	0x10210000
 80014b4:	10120000 	.word	0x10120000
 80014b8:	10110000 	.word	0x10110000
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010000 	.word	0x40010000
 80014c4:	40010800 	.word	0x40010800
 80014c8:	40010c00 	.word	0x40010c00
 80014cc:	40011000 	.word	0x40011000
 80014d0:	40011400 	.word	0x40011400
 80014d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <HAL_GPIO_Init+0x304>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	43db      	mvns	r3, r3
 80014e0:	4909      	ldr	r1, [pc, #36]	@ (8001508 <HAL_GPIO_Init+0x304>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	3301      	adds	r3, #1
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	fa22 f303 	lsr.w	r3, r2, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f47f ae8e 	bne.w	8001218 <HAL_GPIO_Init+0x14>
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	372c      	adds	r7, #44	@ 0x2c
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	611a      	str	r2, [r3, #16]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e272      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8087 	beq.w	800166a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800155c:	4b92      	ldr	r3, [pc, #584]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b04      	cmp	r3, #4
 8001566:	d00c      	beq.n	8001582 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001568:	4b8f      	ldr	r3, [pc, #572]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d112      	bne.n	800159a <HAL_RCC_OscConfig+0x5e>
 8001574:	4b8c      	ldr	r3, [pc, #560]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001580:	d10b      	bne.n	800159a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001582:	4b89      	ldr	r3, [pc, #548]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d06c      	beq.n	8001668 <HAL_RCC_OscConfig+0x12c>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d168      	bne.n	8001668 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e24c      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x76>
 80015a4:	4b80      	ldr	r3, [pc, #512]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a7f      	ldr	r2, [pc, #508]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e02e      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x98>
 80015ba:	4b7b      	ldr	r3, [pc, #492]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7a      	ldr	r2, [pc, #488]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b78      	ldr	r3, [pc, #480]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a77      	ldr	r2, [pc, #476]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e01d      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0xbc>
 80015de:	4b72      	ldr	r3, [pc, #456]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a71      	ldr	r2, [pc, #452]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b6f      	ldr	r3, [pc, #444]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a6e      	ldr	r2, [pc, #440]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0xd4>
 80015f8:	4b6b      	ldr	r3, [pc, #428]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a6a      	ldr	r2, [pc, #424]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b68      	ldr	r3, [pc, #416]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a67      	ldr	r2, [pc, #412]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800160e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fce6 	bl	8000fe8 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fce2 	bl	8000fe8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	@ 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e200      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b5d      	ldr	r3, [pc, #372]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0xe4>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fcd2 	bl	8000fe8 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fcce 	bl	8000fe8 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	@ 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e1ec      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	4b53      	ldr	r3, [pc, #332]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x10c>
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d063      	beq.n	800173e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001676:	4b4c      	ldr	r3, [pc, #304]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001682:	4b49      	ldr	r3, [pc, #292]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b08      	cmp	r3, #8
 800168c:	d11c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x18c>
 800168e:	4b46      	ldr	r3, [pc, #280]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d116      	bne.n	80016c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169a:	4b43      	ldr	r3, [pc, #268]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_RCC_OscConfig+0x176>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e1c0      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4939      	ldr	r1, [pc, #228]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	e03a      	b.n	800173e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d0:	4b36      	ldr	r3, [pc, #216]	@ (80017ac <HAL_RCC_OscConfig+0x270>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fc87 	bl	8000fe8 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fc83 	bl	8000fe8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1a1      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4927      	ldr	r1, [pc, #156]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
 8001710:	e015      	b.n	800173e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <HAL_RCC_OscConfig+0x270>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fc66 	bl	8000fe8 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fc62 	bl	8000fe8 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e180      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d03a      	beq.n	80017c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d019      	beq.n	8001786 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fc46 	bl	8000fe8 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fc42 	bl	8000fe8 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e160      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001772:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_RCC_OscConfig+0x26c>)
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f000 faea 	bl	8001d58 <RCC_Delay>
 8001784:	e01c      	b.n	80017c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_RCC_OscConfig+0x274>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fc2c 	bl	8000fe8 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001792:	e00f      	b.n	80017b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fc28 	bl	8000fe8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d908      	bls.n	80017b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e146      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	42420000 	.word	0x42420000
 80017b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	4b92      	ldr	r3, [pc, #584]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1e9      	bne.n	8001794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a6 	beq.w	800191a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10d      	bne.n	80017fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b88      	ldr	r3, [pc, #544]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a87      	ldr	r2, [pc, #540]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b85      	ldr	r3, [pc, #532]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f6:	2301      	movs	r3, #1
 80017f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fa:	4b82      	ldr	r3, [pc, #520]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001806:	4b7f      	ldr	r3, [pc, #508]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001812:	f7ff fbe9 	bl	8000fe8 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f7ff fbe5 	bl	8000fe8 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b64      	cmp	r3, #100	@ 0x64
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e103      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	4b75      	ldr	r3, [pc, #468]	@ (8001a04 <HAL_RCC_OscConfig+0x4c8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x312>
 8001840:	4b6f      	ldr	r3, [pc, #444]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a6e      	ldr	r2, [pc, #440]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	e02d      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x334>
 8001856:	4b6a      	ldr	r3, [pc, #424]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a69      	ldr	r2, [pc, #420]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	4b67      	ldr	r3, [pc, #412]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a66      	ldr	r2, [pc, #408]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6213      	str	r3, [r2, #32]
 800186e:	e01c      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d10c      	bne.n	8001892 <HAL_RCC_OscConfig+0x356>
 8001878:	4b61      	ldr	r3, [pc, #388]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a60      	ldr	r2, [pc, #384]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6213      	str	r3, [r2, #32]
 8001884:	4b5e      	ldr	r3, [pc, #376]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4a5d      	ldr	r2, [pc, #372]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6213      	str	r3, [r2, #32]
 8001890:	e00b      	b.n	80018aa <HAL_RCC_OscConfig+0x36e>
 8001892:	4b5b      	ldr	r3, [pc, #364]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4a5a      	ldr	r2, [pc, #360]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6213      	str	r3, [r2, #32]
 800189e:	4b58      	ldr	r3, [pc, #352]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4a57      	ldr	r2, [pc, #348]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d015      	beq.n	80018de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fb99 	bl	8000fe8 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff fb95 	bl	8000fe8 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0b1      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ee      	beq.n	80018ba <HAL_RCC_OscConfig+0x37e>
 80018dc:	e014      	b.n	8001908 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018de:	f7ff fb83 	bl	8000fe8 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fb7f 	bl	8000fe8 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e09b      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	4b40      	ldr	r3, [pc, #256]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a3b      	ldr	r2, [pc, #236]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8087 	beq.w	8001a32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001924:	4b36      	ldr	r3, [pc, #216]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d061      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d146      	bne.n	80019c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fb53 	bl	8000fe8 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001946:	f7ff fb4f 	bl	8000fe8 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e06d      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	4b29      	ldr	r3, [pc, #164]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800196c:	d108      	bne.n	8001980 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800196e:	4b24      	ldr	r3, [pc, #144]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	4921      	ldr	r1, [pc, #132]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a19      	ldr	r1, [r3, #32]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001990:	430b      	orrs	r3, r1
 8001992:	491b      	ldr	r1, [pc, #108]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fb23 	bl	8000fe8 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff fb1f 	bl	8000fe8 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e03d      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x46a>
 80019c4:	e035      	b.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <HAL_RCC_OscConfig+0x4cc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fb0c 	bl	8000fe8 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff fb08 	bl	8000fe8 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e026      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x498>
 80019f2:	e01e      	b.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e019      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40007000 	.word	0x40007000
 8001a08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <HAL_RCC_OscConfig+0x500>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0d0      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b6a      	ldr	r3, [pc, #424]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d910      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b67      	ldr	r3, [pc, #412]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	4965      	ldr	r1, [pc, #404]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b63      	ldr	r3, [pc, #396]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0b8      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9c:	4b59      	ldr	r3, [pc, #356]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab4:	4b53      	ldr	r3, [pc, #332]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a52      	ldr	r2, [pc, #328]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001abe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b50      	ldr	r3, [pc, #320]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	494d      	ldr	r1, [pc, #308]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d040      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d115      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e07f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e073      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e06b      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4936      	ldr	r1, [pc, #216]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b30:	f7ff fa5a 	bl	8000fe8 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff fa56 	bl	8000fe8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e053      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d210      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4922      	ldr	r1, [pc, #136]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e032      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4916      	ldr	r1, [pc, #88]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bba:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	490e      	ldr	r1, [pc, #56]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bce:	f000 f821 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	490a      	ldr	r1, [pc, #40]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	4a09      	ldr	r2, [pc, #36]	@ (8001c0c <HAL_RCC_ClockConfig+0x1cc>)
 8001be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_RCC_ClockConfig+0x1d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f8fe 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40022000 	.word	0x40022000
 8001c04:	40021000 	.word	0x40021000
 8001c08:	080029fc 	.word	0x080029fc
 8001c0c:	20000004 	.word	0x20000004
 8001c10:	20000008 	.word	0x20000008

08001c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x30>
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x36>
 8001c42:	e027      	b.n	8001c94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c46:	613b      	str	r3, [r7, #16]
      break;
 8001c48:	e027      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0c9b      	lsrs	r3, r3, #18
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	4a17      	ldr	r2, [pc, #92]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d010      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0c5b      	lsrs	r3, r3, #17
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	4a11      	ldr	r2, [pc, #68]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c76:	fb03 f202 	mul.w	r2, r3, r2
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e004      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	613b      	str	r3, [r7, #16]
      break;
 8001c92:	e002      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x98>)
 8001c96:	613b      	str	r3, [r7, #16]
      break;
 8001c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9a:	693b      	ldr	r3, [r7, #16]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	007a1200 	.word	0x007a1200
 8001cb0:	08002a14 	.word	0x08002a14
 8001cb4:	08002a24 	.word	0x08002a24
 8001cb8:	003d0900 	.word	0x003d0900

08001cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	@ (8001ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd4:	f7ff fff2 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	0adb      	lsrs	r3, r3, #11
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	@ (8001cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08002a0c 	.word	0x08002a0c

08001cf8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	220f      	movs	r2, #15
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_RCC_GetClockConfig+0x58>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d14:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <HAL_RCC_GetClockConfig+0x58>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d20:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <HAL_RCC_GetClockConfig+0x58>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <HAL_RCC_GetClockConfig+0x58>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0207 	and.w	r2, r3, #7
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40022000 	.word	0x40022000

08001d58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d60:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <RCC_Delay+0x34>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <RCC_Delay+0x38>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0a5b      	lsrs	r3, r3, #9
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d74:	bf00      	nop
  }
  while (Delay --);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	60fa      	str	r2, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f9      	bne.n	8001d74 <RCC_Delay+0x1c>
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	20000004 	.word	0x20000004
 8001d90:	10624dd3 	.word	0x10624dd3

08001d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e041      	b.n	8001e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f839 	bl	8001e32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 fb50 	bl	8002478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d001      	beq.n	8001e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e03a      	b.n	8001ed2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a18      	ldr	r2, [pc, #96]	@ (8001edc <HAL_TIM_Base_Start_IT+0x98>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00e      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x58>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e86:	d009      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x58>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d004      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x58>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a13      	ldr	r2, [pc, #76]	@ (8001ee4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d111      	bne.n	8001ec0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d010      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ebe:	e007      	b.n	8001ed0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	40012c00 	.word	0x40012c00
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800

08001ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e041      	b.n	8001f7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe fed8 	bl	8000cc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3304      	adds	r3, #4
 8001f24:	4619      	mov	r1, r3
 8001f26:	4610      	mov	r0, r2
 8001f28:	f000 faa6 	bl	8002478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d109      	bne.n	8001fac <HAL_TIM_PWM_Start+0x24>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	e022      	b.n	8001ff2 <HAL_TIM_PWM_Start+0x6a>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d109      	bne.n	8001fc6 <HAL_TIM_PWM_Start+0x3e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	e015      	b.n	8001ff2 <HAL_TIM_PWM_Start+0x6a>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d109      	bne.n	8001fe0 <HAL_TIM_PWM_Start+0x58>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e008      	b.n	8001ff2 <HAL_TIM_PWM_Start+0x6a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	bf14      	ite	ne
 8001fec:	2301      	movne	r3, #1
 8001fee:	2300      	moveq	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e05e      	b.n	80020b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d104      	bne.n	800200a <HAL_TIM_PWM_Start+0x82>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002008:	e013      	b.n	8002032 <HAL_TIM_PWM_Start+0xaa>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b04      	cmp	r3, #4
 800200e:	d104      	bne.n	800201a <HAL_TIM_PWM_Start+0x92>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002018:	e00b      	b.n	8002032 <HAL_TIM_PWM_Start+0xaa>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d104      	bne.n	800202a <HAL_TIM_PWM_Start+0xa2>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002028:	e003      	b.n	8002032 <HAL_TIM_PWM_Start+0xaa>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2202      	movs	r2, #2
 800202e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2201      	movs	r2, #1
 8002038:	6839      	ldr	r1, [r7, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fc12 	bl	8002864 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1e      	ldr	r2, [pc, #120]	@ (80020c0 <HAL_TIM_PWM_Start+0x138>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d107      	bne.n	800205a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a18      	ldr	r2, [pc, #96]	@ (80020c0 <HAL_TIM_PWM_Start+0x138>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00e      	beq.n	8002082 <HAL_TIM_PWM_Start+0xfa>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800206c:	d009      	beq.n	8002082 <HAL_TIM_PWM_Start+0xfa>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a14      	ldr	r2, [pc, #80]	@ (80020c4 <HAL_TIM_PWM_Start+0x13c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d004      	beq.n	8002082 <HAL_TIM_PWM_Start+0xfa>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a12      	ldr	r2, [pc, #72]	@ (80020c8 <HAL_TIM_PWM_Start+0x140>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d111      	bne.n	80020a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b06      	cmp	r3, #6
 8002092:	d010      	beq.n	80020b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a4:	e007      	b.n	80020b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800

080020cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d020      	beq.n	8002130 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01b      	beq.n	8002130 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0202 	mvn.w	r2, #2
 8002100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f993 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 800211c:	e005      	b.n	800212a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f986 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f995 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d020      	beq.n	800217c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01b      	beq.n	800217c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0204 	mvn.w	r2, #4
 800214c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f96d 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f960 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f96f 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d020      	beq.n	80021c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01b      	beq.n	80021c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0208 	mvn.w	r2, #8
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2204      	movs	r2, #4
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f947 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f93a 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f949 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d020      	beq.n	8002214 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01b      	beq.n	8002214 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0210 	mvn.w	r2, #16
 80021e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2208      	movs	r2, #8
 80021ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f921 	bl	8002442 <HAL_TIM_IC_CaptureCallback>
 8002200:	e005      	b.n	800220e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f914 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f923 	bl	8002454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00c      	beq.n	8002238 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0201 	mvn.w	r2, #1
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fcfc 	bl	8000c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00c      	beq.n	800225c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fb8f 	bl	800297a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00c      	beq.n	8002280 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f8f3 	bl	8002466 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00c      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0220 	mvn.w	r2, #32
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fb62 	bl	8002968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e0ae      	b.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	f200 809f 	bhi.w	8002418 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022da:	a201      	add	r2, pc, #4	@ (adr r2, 80022e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e0:	08002315 	.word	0x08002315
 80022e4:	08002419 	.word	0x08002419
 80022e8:	08002419 	.word	0x08002419
 80022ec:	08002419 	.word	0x08002419
 80022f0:	08002355 	.word	0x08002355
 80022f4:	08002419 	.word	0x08002419
 80022f8:	08002419 	.word	0x08002419
 80022fc:	08002419 	.word	0x08002419
 8002300:	08002397 	.word	0x08002397
 8002304:	08002419 	.word	0x08002419
 8002308:	08002419 	.word	0x08002419
 800230c:	08002419 	.word	0x08002419
 8002310:	080023d7 	.word	0x080023d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f91a 	bl	8002554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0208 	orr.w	r2, r2, #8
 800232e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0204 	bic.w	r2, r2, #4
 800233e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6999      	ldr	r1, [r3, #24]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	619a      	str	r2, [r3, #24]
      break;
 8002352:	e064      	b.n	800241e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f960 	bl	8002620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800236e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800237e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6999      	ldr	r1, [r3, #24]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	021a      	lsls	r2, r3, #8
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	619a      	str	r2, [r3, #24]
      break;
 8002394:	e043      	b.n	800241e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f9a9 	bl	80026f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0208 	orr.w	r2, r2, #8
 80023b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0204 	bic.w	r2, r2, #4
 80023c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69d9      	ldr	r1, [r3, #28]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	61da      	str	r2, [r3, #28]
      break;
 80023d4:	e023      	b.n	800241e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f9f3 	bl	80027c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69da      	ldr	r2, [r3, #28]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69d9      	ldr	r1, [r3, #28]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	021a      	lsls	r2, r3, #8
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	61da      	str	r2, [r3, #28]
      break;
 8002416:	e002      	b.n	800241e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	75fb      	strb	r3, [r7, #23]
      break;
 800241c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002426:	7dfb      	ldrb	r3, [r7, #23]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a2f      	ldr	r2, [pc, #188]	@ (8002548 <TIM_Base_SetConfig+0xd0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00b      	beq.n	80024a8 <TIM_Base_SetConfig+0x30>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002496:	d007      	beq.n	80024a8 <TIM_Base_SetConfig+0x30>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a2c      	ldr	r2, [pc, #176]	@ (800254c <TIM_Base_SetConfig+0xd4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_Base_SetConfig+0x30>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002550 <TIM_Base_SetConfig+0xd8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d108      	bne.n	80024ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a22      	ldr	r2, [pc, #136]	@ (8002548 <TIM_Base_SetConfig+0xd0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00b      	beq.n	80024da <TIM_Base_SetConfig+0x62>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c8:	d007      	beq.n	80024da <TIM_Base_SetConfig+0x62>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a1f      	ldr	r2, [pc, #124]	@ (800254c <TIM_Base_SetConfig+0xd4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d003      	beq.n	80024da <TIM_Base_SetConfig+0x62>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002550 <TIM_Base_SetConfig+0xd8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d108      	bne.n	80024ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a0d      	ldr	r2, [pc, #52]	@ (8002548 <TIM_Base_SetConfig+0xd0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d103      	bne.n	8002520 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f023 0201 	bic.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	611a      	str	r2, [r3, #16]
  }
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40000400 	.word	0x40000400
 8002550:	40000800 	.word	0x40000800

08002554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f023 0201 	bic.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f023 0302 	bic.w	r3, r3, #2
 800259c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <TIM_OC1_SetConfig+0xc8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10c      	bne.n	80025ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0308 	bic.w	r3, r3, #8
 80025b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a13      	ldr	r2, [pc, #76]	@ (800261c <TIM_OC1_SetConfig+0xc8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	621a      	str	r2, [r3, #32]
}
 8002610:	bf00      	nop
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40012c00 	.word	0x40012c00

08002620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f023 0210 	bic.w	r2, r3, #16
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800264e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0320 	bic.w	r3, r3, #32
 800266a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a1d      	ldr	r2, [pc, #116]	@ (80026f0 <TIM_OC2_SetConfig+0xd0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d10d      	bne.n	800269c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800269a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a14      	ldr	r2, [pc, #80]	@ (80026f0 <TIM_OC2_SetConfig+0xd0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d113      	bne.n	80026cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	40012c00 	.word	0x40012c00

080026f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800273c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1d      	ldr	r2, [pc, #116]	@ (80027c4 <TIM_OC3_SetConfig+0xd0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10d      	bne.n	800276e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800276c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <TIM_OC3_SetConfig+0xd0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d113      	bne.n	800279e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800277c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	621a      	str	r2, [r3, #32]
}
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40012c00 	.word	0x40012c00

080027c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	031b      	lsls	r3, r3, #12
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a0f      	ldr	r2, [pc, #60]	@ (8002860 <TIM_OC4_SetConfig+0x98>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d109      	bne.n	800283c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800282e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	621a      	str	r2, [r3, #32]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40012c00 	.word	0x40012c00

08002864 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2201      	movs	r2, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a1a      	ldr	r2, [r3, #32]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a1a      	ldr	r2, [r3, #32]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	431a      	orrs	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	621a      	str	r2, [r3, #32]
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e046      	b.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a16      	ldr	r2, [pc, #88]	@ (800295c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00e      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002910:	d009      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a10      	ldr	r2, [pc, #64]	@ (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10c      	bne.n	8002940 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800292c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4313      	orrs	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800

08002968 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <memset>:
 800298c:	4603      	mov	r3, r0
 800298e:	4402      	add	r2, r0
 8002990:	4293      	cmp	r3, r2
 8002992:	d100      	bne.n	8002996 <memset+0xa>
 8002994:	4770      	bx	lr
 8002996:	f803 1b01 	strb.w	r1, [r3], #1
 800299a:	e7f9      	b.n	8002990 <memset+0x4>

0800299c <__libc_init_array>:
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	2600      	movs	r6, #0
 80029a0:	4d0c      	ldr	r5, [pc, #48]	@ (80029d4 <__libc_init_array+0x38>)
 80029a2:	4c0d      	ldr	r4, [pc, #52]	@ (80029d8 <__libc_init_array+0x3c>)
 80029a4:	1b64      	subs	r4, r4, r5
 80029a6:	10a4      	asrs	r4, r4, #2
 80029a8:	42a6      	cmp	r6, r4
 80029aa:	d109      	bne.n	80029c0 <__libc_init_array+0x24>
 80029ac:	f000 f81a 	bl	80029e4 <_init>
 80029b0:	2600      	movs	r6, #0
 80029b2:	4d0a      	ldr	r5, [pc, #40]	@ (80029dc <__libc_init_array+0x40>)
 80029b4:	4c0a      	ldr	r4, [pc, #40]	@ (80029e0 <__libc_init_array+0x44>)
 80029b6:	1b64      	subs	r4, r4, r5
 80029b8:	10a4      	asrs	r4, r4, #2
 80029ba:	42a6      	cmp	r6, r4
 80029bc:	d105      	bne.n	80029ca <__libc_init_array+0x2e>
 80029be:	bd70      	pop	{r4, r5, r6, pc}
 80029c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c4:	4798      	blx	r3
 80029c6:	3601      	adds	r6, #1
 80029c8:	e7ee      	b.n	80029a8 <__libc_init_array+0xc>
 80029ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ce:	4798      	blx	r3
 80029d0:	3601      	adds	r6, #1
 80029d2:	e7f2      	b.n	80029ba <__libc_init_array+0x1e>
 80029d4:	08002a28 	.word	0x08002a28
 80029d8:	08002a28 	.word	0x08002a28
 80029dc:	08002a28 	.word	0x08002a28
 80029e0:	08002a2c 	.word	0x08002a2c

080029e4 <_init>:
 80029e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e6:	bf00      	nop
 80029e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ea:	bc08      	pop	{r3}
 80029ec:	469e      	mov	lr, r3
 80029ee:	4770      	bx	lr

080029f0 <_fini>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr
